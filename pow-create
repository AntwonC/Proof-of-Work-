#!/usr/bin/python3
import hashlib
import sys
import time

emptySet = set()
f = open("output.txt", "w")
global count
global done 


def allPrefixes(set, k, h): 
    n = len(set)
    generatePrefixes(set, "", n, k, h)

    

def generatePrefixes(set, prefix, n, k, h): 
     
    #global done
    if ( k == 0 ): 
        emptySet.add(prefix)
        return

    for i in range(n): 
        newPrefix = prefix + set[i]
        generatePrefixes(set, newPrefix, n, k-1, h)

def checkBits(tempHash):
    scale = 16 
    num_of_bits = len(tempHash) * 4
     
    bits = bin(int(tempHash, scale))[2:].zfill(num_of_bits)
    #print(bits)
    # Work to count the number of bits
    global count
    count = 0
    for x in bits: 
        #print(count)
      # if count == int(sys.argv[1]):
        #   print(bits)
         #  return True
       if x == '0': 
          count += 1
       else: 
           if count >= int(sys.argv[1]):
              # print(count)
               return True
           else:   
               return False

if len(sys.argv) > 3: 
    print("Too many arguments")
    sys.exit()
    
with open(sys.argv[2], 'r') as file: 
    textFile = file.read() #Stored file as string 
#print(textFile)
h = hashlib.sha256(textFile.encode('utf-8')).hexdigest() #Openssl command with string
#print(h)

#Write to file 
f.write("File: " + sys.argv[2] + "\n")
f.write("Initial-hash: " + h + "\n") #Write the hash to file


n = sys.argv[1]
#k = ' '.join(format(x, 'b') for x in bytearray(h, 'utf-8'))
#k = ' '.join(format(ord(x), 'b') for x in h)

#Create set 
setChars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
            'u','v','w','x','y','z', '0','1','2','3','4','5','6','7','8','9','{','|','}','~','^',']','[','\\',
            '`','?','@','>','=','<',':',';','!','#','%','&','(',')','A','B','C','D','E','F','G','H','I','J','K',
            'L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','_','*']


#print(emptySet)
num = 0
done = False
iterations = 0
start = time.time()
while True:
    if done == "Limit": 
        f.write("Proof-of-work: failed\n")
        f.write("Leading-bits: failed\n")
        f.write("Iterations: max iterations" + "\n")
        f.write("Compute-time: failed\n")
        break
    elif done == True: 
        break
    num += 1
    allPrefixes(setChars,num,h) 
    for x in emptySet:
        temp = ""
        temp = x + h
        z = hashlib.sha256(temp.encode('utf-8')).hexdigest()
        iterations += 1
        if iterations == 1000000000:
           done = "limit"
        elif checkBits(z) == True:
            end = time.time()
            f.write("Proof-of-work: " + x + "\n")
            f.write("Hash: " + z + "\n")
            f.write("Leading-bits: " + str(count) + "\n")
            f.write("Iterations: " + str(iterations) + "\n")
            f.write("Compute-time: " + str(end-start) + "\n")
           #print(x)  
           # print(end - start) #time in seconds
            done = True
            break
        else: 
            emptySet = set()

#print(iterations)
#temp = ")FT5D" + textFile
#z = hashlib.sha256(temp.encode('utf-8')).hexdigest()
#print(z)

#scale = 16 
#num_of_bits = len(z) * 4
# Converts to binary string
#bits = bin(int(z, scale))[2:].zfill(num_of_bits)

# Work to count the number of bits 
#count = 0
#for x in bits: 
    #print(count)
 #   if count == int(sys.argv[1]):
 #       break
 #   elif x == '0': 
  #      count += 1

#print(count)

# print("%s" % sys.argv[1]) n bits of leading zeros
# print("%s" % sys.argv[2]) the file 
